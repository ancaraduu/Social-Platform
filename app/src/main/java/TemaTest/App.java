/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.PrintWriter;
import java.io.IOException;
import java.io.File;
import java.util.logging.Logger;

// Likeable Interface for Objects that can be liked (posts, comments)
interface Likeable {
    void like(User theUser);
    void unlike(User theUser);
}
public class App {

    static User[] users = new User[200];    // Users in the app
    static int userCounter;                 // Number of users
    static int idMakerComm;                 // Counter of comments in the app
    static int idMakerPost;                 // Counter of posts in the app
    private static final Logger logger = Logger.getLogger(App.class.getName());
    public App() {/* compiled code */}
    private void createUser(String username, String password){

        // Create a new user using the username and the password provided
        User newUser = new User(username, password);
        // Add it to the array of users
        userCounter++;
        users[userCounter - 1] = newUser;

        // Create a file that contains the usernames and the passwords of all the users
        try (FileWriter fw = new FileWriter("user_pass.txt", true);
             BufferedWriter bw = new BufferedWriter(fw);
             PrintWriter out = new PrintWriter(bw)) {
            out.println(username);
            out.println(password);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        System.out.println("{'status':'ok','message':'User created successfully'}");
    }

    private static User findUser(String username, String password){
        User theUser = null;
        for(int i = 0; i < userCounter; i++)
            // Check if the password corresponds to the username
            if (users[i].getUsername().equals(username))
                if (users[i].getPassword().equals((password))) {
                    theUser = users[i];
                    break;
                }
        return theUser;
    }

    private static User findUserByName(String username){
        User theUser = null;
        for(int i = 0; i < userCounter; i++)
            // Find the user only by his username
            if (users[i].getUsername().equals(username)) {
                    theUser = users[i];
                    break;
            }
        return theUser;
    }

    // Find a post looking through all the posts of every user in the app
    private static Post findPostAllUsers(int id) {
        Post thePost = null;
        for(int i = 0; i < userCounter; i++)
            for(int j = 0; j < users[i].getCounterPost(); j++) {
                if (users[i].getPosts()[j].getId() == id) {
                    thePost = users[i].getPosts()[j];
                    break;
                }
            }
        return thePost;
    }

    // Find a comment looking through all the comments of all the posts of every user in the app
        // -> And return the post where it was added
    private static Post findCommentAllUsersAllPosts(User theUser, int id){
        Post thePost = null;
        for(int t = 0; t < userCounter; t++)
            for (int i = 0; i < users[t].getCounterPost(); i++)
                for (int j = 0; j < users[t].getPosts()[i].getCounterComments(); j++)
                    if (users[t].getPosts()[i].getComments()[j].getId() == id)
                        if (users[t].getPosts()[i].getComments()[j].getUsername().equals(theUser.getUsername())) {
                            thePost = users[t].getPosts()[i];
                            break;
                        }

        return thePost;
    }

    // Find a comment looking through all the comments of all the posts of every user in the app
        // -> And return the comment
    private static Comm findCommentAllUsersAllPosts2(int id){
        Comm theComment = null;
        for(int t = 0; t < userCounter; t++)
            for (int i = 0; i < users[t].getCounterPost(); i++)
                for (int j = 0; j < users[t].getPosts()[i].getCounterComments(); j++)
                    if (users[t].getPosts()[i].getComments()[j].getId() == id) {
                        theComment = users[t].getPosts()[i].getComments()[j];
                        break;
                    }

        return theComment;
    }

    static void getMostLikedPosts(){
        System.out.print("{ 'status' : 'ok', 'message' : [");

        // Get the date format
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        Date date = new Date();
        String currentDateAsString = dateFormat.format(date);

        for(int t = 1; t <= 5; t++) {       // Repeat the action 5 times
            Post thePost = getNextPostMaxLikes();

            if(thePost != null) {
                thePost.used = true;        // Mark the post as used and list it
                if (t == 1)
                    System.out.print("{'post_id' : " + "'" + thePost.getId() + "'" + ", 'post_text' : " + thePost.getText() + ", 'post_date' : '" + currentDateAsString + "', 'username' : " + thePost.getUsername() + ",'number_of_likes':'" + thePost.getCounterLiked() + "'}");
                else
                    System.out.print(",{'post_id' : " + "'" + thePost.getId() + "'" + ", 'post_text' : " + thePost.getText() + ", 'post_date' : '" + currentDateAsString + "', 'username' : " + thePost.getUsername() + ",'number_of_likes':'" + thePost.getCounterLiked() + "'}");
            } else break;

        }
        makePostsUnused();
        System.out.println(" ]}");
    }

    private static Post getNextPostMaxLikes() {
        Post thePost = null;
        int maxim = -1;

        // Look through every post of every user
        for (int i = 0; i < userCounter; i++) {
            for (int j = 0; j < users[i].getCounterPost(); j++)
                // Find the post with most likes that hasn't been used so far
                if (users[i].getPosts()[j].getCounterLiked() > maxim && !users[i].getPosts()[j].used) {
                    maxim = users[i].getPosts()[j].getCounterLiked();
                    thePost = users[i].getPosts()[j];
                }
        }
        return thePost;
    }

    static void makePostsUnused() {
        for (int i = 0; i < userCounter; i++)
            for (int j = 0; j < users[i].getCounterPost(); j++)
                users[i].getPosts()[j].used = false;
    }

    static void getMostCommentedPosts(){
        System.out.print("{ 'status' : 'ok', 'message' : [");

        // Get date format
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        Date date = new Date();
        String currentDateAsString = dateFormat.format(date);

        for(int t = 1; t <= 5; t++) {       // Repeat the action 5 times
            Post thePost = getNextPostMaxComments();

            if(thePost != null) {
                thePost.used = true;        // Mark the post as used and list it
                if (t == 1)
                    System.out.print("{'post_id' : " + "'" + thePost.getId() + "'" + ", 'post_text' : " + thePost.getText() + ", 'post_date' : '" + currentDateAsString + "', 'username' : " + thePost.getUsername() + ",'number_of_comments':'" + thePost.getCounterComments() + "'}");
                else
                    System.out.print(",{'post_id' : " + "'" + thePost.getId() + "'" + ", 'post_text' : " + thePost.getText() + ", 'post_date' : '" + currentDateAsString + "', 'username' : " + thePost.getUsername() + ",'number_of_comments':'" + thePost.getCounterComments() + "'}");
            } else break;

        }
        makePostsUnused();
        System.out.println("]}");
    }
    private static Post getNextPostMaxComments() {
        Post thePost = null;
        int maxim = -1;

        // Look through every post of every user
        for (int i = 0; i < userCounter; i++) {
            for (int j = 0; j < users[i].getCounterPost(); j++)
                // Find the post with most comments that hasn't been used so far
                if (users[i].getPosts()[j].getCounterComments() > maxim && !users[i].getPosts()[j].used) {
                    maxim = users[i].getPosts()[j].getCounterComments();
                    thePost = users[i].getPosts()[j];
                }
        }
        return thePost;
    }

    static void getMostFollowedUsers(){
        System.out.print("{ 'status' : 'ok', 'message' : [");

        for(int t = 1; t <= 5; t++) {
            User theUser = null;
            int maxim = -1;
            for (int i = 0; i < userCounter; i++) {
                // Find the user with most followers that hasn't been used so far
                if (users[i].getCounterFollowers() > maxim && !users[i].used) {
                    maxim = users[i].getCounterFollowers();
                    theUser = users[i];
                }
            }

            if(theUser != null) {
                theUser.used = true;        // Mark it as used and list it
                if (t == 1)
                    System.out.print("{'username' : " + theUser.getUsername() + ",'number_of_followers':'" + theUser.getCounterFollowers() + "'}");
                else
                    System.out.print(",{'username' : " + theUser.getUsername() + ",'number_of_followers':'" + theUser.getCounterFollowers() + "'}");
            } else break;

        }
        makeUsersUnused();
        System.out.println(" ]}");
    }

    static void makeUsersUnused() {
        for (int i = 0; i < userCounter; i++)
            users[i].used = false;
    }

    static void getMostLikedUsers(){
        System.out.print("{ 'status' : 'ok', 'message' : [");

        // Array of number of likes for each user (likes from the posts and the comments he added)
        int[] likesSum = new int[200];
        for (int g = 0; g < userCounter; g++){
            likesSum[g] = 0;
            for (int i = 0; i < userCounter; i++)
                for (int j = 0; j < users[i].getCounterPost(); j++) {
                    // Check if he was the one to add the post
                    if(users[i].getPosts()[j].getUsername().equals(users[g].getUsername()))
                        likesSum[g] = likesSum[g] + users[i].getPosts()[j].getCounterLiked();
                    for(int k = 0; k < users[i].getPosts()[j].getCounterComments(); k++)
                        // Check if he was the one to add the comment
                        if(users[i].getPosts()[j].getComments()[k].getUsername().equals(users[g].getUsername()))
                            likesSum[g] = likesSum[g] + users[i].getPosts()[j].getComments()[k].getCounterLiked();
                }
        }

        for(int t = 1; t <= 5; t++) {
            User theUser = null;
            int maxim = -1;
            for (int i = 0; i < userCounter; i++) {
                // Find the user with most likes that hasn't been used so far
                if (likesSum[i] > maxim && !users[i].used) {
                    maxim = likesSum[i];
                    theUser = users[i];
                }
            }
            if(theUser != null) {
                theUser.used = true;            // Mark it as used and list it
                if (t == 1)
                    System.out.print("{'username' : " + theUser.getUsername() + ",'number_of_likes':'" + maxim + "'}");
                else
                    System.out.print(",{'username' : " + theUser.getUsername() + ",'number_of_likes':'" + maxim + "'}");
            } else break;
        }
        makeUsersUnused();
        System.out.println("]}");
    }

    static private void cleanup(){
        try {
            // Delete the file that contains the username and password for each user
            File f= new File(".\\user_pass.txt");
            if(!f.delete())
                System.out.println("Error! Couldn't delete file!");
            // Create a new array of users, losing the references to the old ones
            users = new User[200];
            userCounter = 0;
            // Reset the numbers of posts and comments
            idMakerPost = 0;
            idMakerComm = 0;
        } catch (SecurityException e) {
            logger.severe("SecurityException occurred while deleting file: " + e.getMessage());
        } catch (Exception e) {
            logger.severe("Exception occurred: " + e.getMessage());
        }

        logger.info("{'status':'ok','message':'Cleanup finished successfully'}");
    }

    public static void main(java.lang.String[] strings) {
        App app = new App();

        // Dummy
        if(strings == null) {
            System.out.println("Hello world!");
            return;
        }

        // Create user
        if(strings[0].equals("-create-user")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2))
                    if(findUser(strings[1].substring(3), strings[2].substring(3)) != null) {
                        System.out.println("{ 'status' : 'error', 'message' : 'User already exists'}");
                    } else app.createUser(strings[1].substring(3), strings[2].substring(3));
                else
                    System.out.println("{ 'status' : 'error', 'message' : 'Please provide password'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'Please provide username'}");

        }

        //Create post
        if(strings[0].equals("-create-post")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2)) {
                    User theUser = findUser(strings[1].substring(3), strings[2].substring(3));
                    if(theUser == null)
                        System.out.println("{'status':'error','message':'Login failed'}");
                    else {
                        if (strings.length >= 4 && strings[3].regionMatches(false, 0, "-text", 0, 5)) {

                            if (strings[3].length() <= 306)     //  Verify text length
                                theUser.createPost(strings[3].substring(6));
                            else
                                System.out.println("{ 'status' : 'error', 'message' : 'Post text length exceeded'}");

                        } else
                            System.out.println("{ 'status' : 'error', 'message' : 'No text provided'}");
                    }
                } else
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
        }

        //Delete post
        if(strings[0].equals("-delete-post-by-id")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2)) {
                    User theUser = findUser(strings[1].substring(3), strings[2].substring(3));

                    if(theUser == null)
                        System.out.println("{'status':'error','message':'Login failed'}");
                    else {
                        if (strings.length >= 4 && strings[3].regionMatches(false, 0, "-id", 0, 3)) {

                            // Verify id (post existence)
                            Post thePost = theUser.findPost(Integer.parseInt(strings[3].substring(5, strings[3].length() - 1)));
                            if (thePost != null && thePost.getUsername().equals(theUser.getUsername()))
                               theUser.deletePost(thePost);
                            else
                                System.out.println("{ 'status' : 'error', 'message' : 'The identifier was not valid'}");

                        } else
                            System.out.println("{ 'status' : 'error', 'message' : 'No identifier was provided'}");
                    }
                } else
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");

        }

        // Follow user by username
        if(strings[0].equals("-follow-user-by-username")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2)) {
                    User theUser = findUser(strings[1].substring(3), strings[2].substring(3));
                    if(theUser == null)
                        System.out.println("{'status':'error','message':'Login failed'}");
                    else {
                        if (strings.length >= 4 && strings[3].regionMatches(false, 0, "-username", 0, 9)) {
                            User theUserToFollow = findUserByName(strings[3].substring(10));

                            boolean followed = false;
                            if(theUserToFollow != null)
                                followed = theUser.checkIfFollowing(theUserToFollow);

                            // Check existence of user to follow and if already followed
                            if(theUserToFollow == null || followed)
                                System.out.println("{'status':'error','message':'The username to follow was not valid'}");
                            else
                                theUser.follow(theUserToFollow);
                        } else
                            System.out.println("{ 'status' : 'error', 'message' : 'No username to follow was provided'}");
                    }
                } else
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
        }

        // Unfollow user by username
        if(strings[0].equals("-unfollow-user-by-username")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2)) {
                    User theUser = findUser(strings[1].substring(3), strings[2].substring(3));
                    if(theUser == null)
                        System.out.println("{'status':'error','message':'Login failed'}");
                    else {
                        if (strings.length >= 4 && strings[3].regionMatches(false, 0, "-username", 0, 9)) {
                            User theUserToUnfollow = findUserByName(strings[3].substring(10));

                            boolean followed = false;
                            if(theUserToUnfollow != null)
                                followed = theUser.checkIfFollowing(theUserToUnfollow);

                            // Check if already unfollowed
                            if(!followed)
                                System.out.println("{'status':'error','message':'The username to unfollow was not valid'}");
                            else
                                theUser.unfollow(theUserToUnfollow);
                        } else
                            System.out.println("{ 'status' : 'error', 'message' : 'No username to unfollow was provided'}");
                    }
                } else
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
        }

        // Like a post
        if(strings[0].equals("-like-post")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2)) {
                    User theUser = findUser(strings[1].substring(3), strings[2].substring(3));

                    if(theUser == null)
                        System.out.println("{'status':'error','message':'Login failed'}");
                    else {
                        if (strings.length >= 4 && strings[3].regionMatches(false, 0, "-post-id", 0, 8)) {

                            Post thePost = findPostAllUsers(Integer.parseInt(strings[3].substring(10, strings[3].length() - 1)));
                            boolean liked;
                            if (thePost != null) {
                                liked = thePost.checkIfLiked(theUser);

                                // Check if already liked
                                if(liked)
                                    System.out.println("{ 'status' : 'error', 'message' : 'The post identifier to like was not valid'}");
                                else
                                    ((Likeable) thePost).like(theUser);
                            }
                            else
                                System.out.println("{ 'status' : 'error', 'message' : 'The post identifier to like was not valid'}");

                        } else
                            System.out.println("{ 'status' : 'error', 'message' : 'No post identifier to like was provided'}");
                    }
                } else
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");

        }

        // Unlike a post
        if(strings[0].equals("-unlike-post")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2)) {
                    User theUser = findUser(strings[1].substring(3), strings[2].substring(3));

                    if(theUser == null)
                        System.out.println("{'status':'error','message':'Login failed'}");
                    else {
                        if (strings.length >= 4 && strings[3].regionMatches(false, 0, "-post-id", 0, 8)) {

                            Post thePost = findPostAllUsers(Integer.parseInt(strings[3].substring(10, strings[3].length() - 1)));
                            boolean liked;
                            if (thePost != null) {
                                liked = thePost.checkIfLiked(theUser);

                                // Check if already unliked
                                if(!liked)
                                    System.out.println("{ 'status' : 'error', 'message' : 'The post identifier to unlike was not valid'}");
                                else
                                    ((Likeable) thePost).unlike(theUser);
                            }
                            else
                                System.out.println("{ 'status' : 'error', 'message' : 'The post identifier to unlike was not valid'}");

                        } else
                            System.out.println("{ 'status' : 'error', 'message' : 'No post identifier to unlike was provided'}");
                    }
                } else
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");

        }

        // Add comment to post
        if(strings[0].equals("-comment-post")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2)) {
                    User theUser = findUser(strings[1].substring(3), strings[2].substring(3));
                    if(theUser == null)
                        System.out.println("{'status':'error','message':'Login failed'}");
                    else {
                        if (strings.length >= 4 && strings[3].regionMatches(false, 0, "-post-id", 0, 8)) {

                            // Find the post looking through all the posts of all the users
                            Post thePost = findPostAllUsers(Integer.parseInt(strings[3].substring(10, strings[3].length() - 1)));
                            if (thePost != null) {
                                if (strings.length >= 5 && strings[4].regionMatches(false, 0, "-text", 0, 5)) {

                                    if (strings[4].length() <= 306)     // Verify comment text length
                                        thePost.commentPost(theUser, strings[4].substring(6));
                                    else
                                        System.out.println("{ 'status' : 'error', 'message' : 'Comment text length exceeded'}");

                                } else
                                    System.out.println("{ 'status' : 'error', 'message' : 'No text provided'}");
                            } else
                                System.out.println("{ 'status' : 'error', 'message' : 'The identifier was not valid'}");

                        } else
                            System.out.println("{ 'status' : 'error', 'message' : 'No text provided'}");
                    }
                } else
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
        }

        // Delete comment by id
        if(strings[0].equals("-delete-comment-by-id")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2)) {
                    User theUser = findUser(strings[1].substring(3), strings[2].substring(3));

                    if(theUser == null)
                        System.out.println("{'status':'error','message':'Login failed'}");
                    else {
                        if (strings.length >= 4 && strings[3].regionMatches(false, 0, "-id", 0, 3)) {

                            // Find the post where the comment has been added
                            Post thePost = findCommentAllUsersAllPosts(theUser, Integer.parseInt(strings[3].substring(5, strings[3].length() - 1)));
                            // Find the comment by the id provided
                            Comm theComment = findCommentAllUsersAllPosts2(Integer.parseInt(strings[3].substring(5, strings[3].length() - 1)));

                            // Check post existence
                            // You can delete the comment if you were the one to add it or if the post where it has been added belongs to you
                            if (thePost != null && (theComment.getUsername().equals(theUser.getUsername()) || thePost.getUsername().equals(theUser.getUsername())))
                                thePost.deleteComment(theComment);
                            else
                                System.out.println("{ 'status' : 'error', 'message' : 'The identifier was not valid'}");

                        } else
                            System.out.println("{ 'status' : 'error', 'message' : 'No identifier was provided'}");
                    }
                } else
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
        }

        // Like comment
        if(strings[0].equals("-like-comment")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2)) {
                    User theUser = findUser(strings[1].substring(3), strings[2].substring(3));

                    if(theUser == null)
                        System.out.println("{'status':'error','message':'Login failed'}");
                    else {
                        if (strings.length >= 4 && strings[3].regionMatches(false, 0, "-comment-id", 0, 11)) {

                            Comm theComment = findCommentAllUsersAllPosts2(Integer.parseInt(strings[3].substring(13, strings[3].length() - 1)));

                            boolean liked;
                            if (theComment != null) {
                                liked = theComment.checkIfLiked(theUser);

                                // Check if already liked
                                if(liked)
                                    System.out.println("{ 'status' : 'error', 'message' : 'The comment identifier to like was not valid'}");
                                else
                                    theComment.like(theUser);
                            }
                            else
                                System.out.println("{ 'status' : 'error', 'message' : 'The comment identifier to like was not valid'}");

                        } else
                            System.out.println("{ 'status' : 'error', 'message' : 'No comment identifier to like was provided'}");
                    }
                } else
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
        }

        // Unlike comment
        if(strings[0].equals("-unlike-comment")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2)) {
                    User theUser = findUser(strings[1].substring(3), strings[2].substring(3));

                    if(theUser == null)
                        System.out.println("{'status':'error','message':'Login failed'}");
                    else {
                        if (strings.length >= 4 && strings[3].regionMatches(false, 0, "-comment-id", 0, 11)) {

                            Comm theComment = findCommentAllUsersAllPosts2(Integer.parseInt(strings[3].substring(13, strings[3].length() - 1)));

                            boolean liked;
                            if (theComment != null) {
                                liked = theComment.checkIfLiked(theUser);

                                // Check if already unliked
                                if(!liked)
                                    System.out.println("{ 'status' : 'error', 'message' : 'The comment identifier to unlike was not valid'}");
                                else
                                    theComment.unlike(theUser);
                            }
                            else
                                System.out.println("{ 'status' : 'error', 'message' : 'The comment identifier to unlike was not valid'}");

                        } else
                            System.out.println("{ 'status' : 'error', 'message' : 'No comment identifier to unlike was provided'}");
                    }
                } else
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");

        }

        // Get the posts of the people you are following
        if(strings[0].equals("-get-followings-posts")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2)) {
                    User theUser = findUser(strings[1].substring(3), strings[2].substring(3));
                    if(theUser == null)
                        System.out.println("{'status':'error','message':'Login failed'}");
                    else {
                        theUser.getFollowingsPosts();
                    }
                } else
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
        }

        // Get the posts of a user
        if(strings[0].equals("-get-user-posts")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2)) {
                    User theUser = findUser(strings[1].substring(3), strings[2].substring(3));
                    if(theUser == null)
                        System.out.println("{'status':'error','message':'Login failed'}");
                    else {
                        if (strings.length >= 4 && strings[3].regionMatches(false, 0, "-username", 0, 9)) {

                            // Get the user which posts we want to list
                            User theUserToListPosts = findUserByName(strings[3].substring(10));

                            boolean followed = false;
                            if(theUserToListPosts != null) {
                                followed = theUser.checkIfFollowing(theUserToListPosts);
                            }

                            // Check if you follow the user which posts you want to list
                                // -> If you don't follow him, you can't list his posts
                            if(!followed)
                                System.out.println("{'status':'error','message':'The username to list posts was not valid'}");
                            else theUserToListPosts.listPosts();
                        } else
                            System.out.println("{ 'status' : 'error', 'message' : 'No username to list posts was provided'}");
                    }
                } else
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
        }

        // Get the details of a post
        if(strings[0].equals("-get-post-details")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2)) {
                    User theUser = findUser(strings[1].substring(3), strings[2].substring(3));
                    if(theUser == null)
                        System.out.println("{'status':'error','message':'Login failed'}");
                    else {
                        if (strings.length >= 4 && strings[3].regionMatches(false, 0, "-post-id", 0, 8)) {
                            Post thePost = findPostAllUsers(Integer.parseInt(strings[3].substring(10, strings[3].length() - 1)));

                            // Check post existence
                            if(thePost == null)
                                    System.out.println("{'status':'error','message':'The post identifier was not valid'}");
                            else {
                                // Find the user that posted the post you want to list
                                User theUserThatPosted = findUserByName(thePost.getUsername());

                                // Check if you follow that user
                                    // -> If you don't follow him, you can't see his posts
                                boolean followed = false;
                                if(theUserThatPosted != null) {
                                    followed = theUser.checkIfFollowing(theUserThatPosted);
                                }
                                if(followed)
                                    thePost.getPostDetails();
                                else
                                    System.out.println("{'status':'error','message':'The post identifier was not valid'}");
                            }
                        } else
                            System.out.println("{ 'status' : 'error', 'message' : 'No post identifier was provided'}");
                    }
                } else
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
        }

        // Get the users you are following
        if(strings[0].equals("-get-following")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2)) {
                    User theUser = findUser(strings[1].substring(3), strings[2].substring(3));
                    if(theUser == null)
                        System.out.println("{'status':'error','message':'Login failed'}");
                    else {
                        theUser.getFollowing();
                    }
                } else
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
        }

        // Get the users that follow you
        if(strings[0].equals("-get-followers")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2)) {
                    User theUser = findUser(strings[1].substring(3), strings[2].substring(3));
                    if(theUser == null)
                        System.out.println("{'status':'error','message':'Login failed'}");
                    else {
                        if (strings.length >= 4 && strings[3].regionMatches(false, 0, "-username", 0, 9)) {
                            User theUserToListFollowers = findUserByName(strings[3].substring(10));

                            if(theUserToListFollowers == null)
                                System.out.println("{'status':'error','message':'The username to list followers was not valid'}");
                            else
                                theUserToListFollowers.getFollowers();
                        } else
                            System.out.println("{ 'status' : 'error', 'message' : 'No username to list followers was provided'}");
                    }
                } else
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
        }

        // Get the 5 most liked posts in the app
        if(strings[0].equals("-get-most-liked-posts")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2)) {
                    User theUser = findUser(strings[1].substring(3), strings[2].substring(3));
                    if(theUser == null)
                        System.out.println("{'status':'error','message':'Login failed'}");
                    else {
                        getMostLikedPosts();
                    }
                } else
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
        }

        // Get the 5 most commented posts in the app
        if(strings[0].equals("-get-most-commented-posts")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2)) {
                    User theUser = findUser(strings[1].substring(3), strings[2].substring(3));
                    if(theUser == null)
                        System.out.println("{'status':'error','message':'Login failed'}");
                    else {
                        getMostCommentedPosts();
                    }
                } else
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
        }

        //Get the 5 most followed users in the app
        if(strings[0].equals("-get-most-followed-users")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2)) {
                    User theUser = findUser(strings[1].substring(3), strings[2].substring(3));
                    if(theUser == null)
                        System.out.println("{'status':'error','message':'Login failed'}");
                    else {
                        getMostFollowedUsers();
                    }
                } else
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
        }

        // Get the 5 most liked users in the app (posts likes + comments likes)
        if(strings[0].equals("-get-most-liked-users")) {
            // Verify authentication
            if(strings.length >= 2 && strings[1].regionMatches(false, 0, "-u", 0, 2)) {
                if (strings.length >= 3 && strings[2].regionMatches(false, 0, "-p", 0, 2)) {
                    User theUser = findUser(strings[1].substring(3), strings[2].substring(3));
                    if(theUser == null)
                        System.out.println("{'status':'error','message':'Login failed'}");
                    else {
                        getMostLikedUsers();
                    }
                } else
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
            } else
                System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
        }

        // Cleanup
        if(strings[0].equals("-cleanup-all"))
            cleanup();
    }
}